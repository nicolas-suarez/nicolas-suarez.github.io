<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nicolás Suárez Chavarría</title>
    <link>https://nicolas-suarez.github.io/</link>
      <atom:link href="https://nicolas-suarez.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Nicolás Suárez Chavarría</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 18 Mar 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://nicolas-suarez.github.io/media/icon_hu5c88e8a9398cf657f3e83a0d9ccab3ac_75464_512x512_fill_lanczos_center_3.png</url>
      <title>Nicolás Suárez Chavarría</title>
      <link>https://nicolas-suarez.github.io/</link>
    </image>
    
    <item>
      <title>Predicting Ground Level Ozone Concentration from Urban Satellite and Street Level Imagery using Multimodal CNN</title>
      <link>https://nicolas-suarez.github.io/research/urban-emissions/</link>
      <pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://nicolas-suarez.github.io/research/urban-emissions/</guid>
      <description>&lt;p&gt;This was our class project for Stanford CS230 &amp;ldquo;Deep Learning&amp;rdquo; class during the Winter 2021 quarter. The project was featured as one of the &lt;a href=&#34;https://cs230.stanford.edu/past-projects/#winter-2021&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Outstanding projects for the Winter 2021 quarter&lt;/a&gt;. You can find our final report &lt;a href=&#34;http://cs230.stanford.edu/projects_winter_2021/reports/70701113.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;p&gt;This project examines the relationship between the level of ozone concentration
in urban locations and their physical features through the use of Convolutional
Neural Networks (CNNs). We train two models, including one trained on satellite
imagery (&amp;ldquo;Satellite CNN&amp;rdquo;) to capture higher-level features such as the location&amp;rsquo;s 
geography, and the other trained on street-level imagery (&amp;ldquo;Street CNN&amp;rdquo;) to learn
ground-level features such as motor vehicle activity. These features are then 
concatenated to train neural network (&amp;ldquo;Concat NN&amp;rdquo;) on this shared representation
and predict the location&amp;rsquo;s level of ozone as measured in parts per billion.&lt;/p&gt;
&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;
&lt;p&gt;We obtained ozone measurements (parts per billion) for 12,976 semi-unique locations with ozone levels information mostly located in North America from &lt;a href=&#34;https://www.airnow.gov/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AirNow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our satellite imagery dataset was constructed using the Google Earth Engine API: for each location labeled with an ozone reading, we retrieve one satellite image centered at that location from the Landsat 8 Surface Reflectance Tier 1 Collection with a resolution of 224 $\times$ 224 pixels which represents $6.72$ km $\times$ $6.72$ km.  We use 7 bands from this collection: RGB, ultra blue, near infrared, and two shortwave infrared bands. We preprocess each of our images by adding a cloud mask per pixel and then computing the per pixel and band mean composite of all the available images for the year 2020.&lt;/p&gt;
&lt;p&gt;The street-level imagery dataset was constructed using the Google Maps Street View API. For each location labeled with an ozone level, we randomly sample 10 geospatial points within $6.72$ km from the measurement point.&lt;/p&gt;
&lt;p&gt;Here we can see some examples from our dataset:&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;table1.jpg&#34; /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;network-architecture&#34;&gt;Network architecture&lt;/h2&gt;
&lt;p&gt;We train the two CNNs separately on the satellite and street-level imagery, both using a ResNet-18 architecture implemented in PyTorch and pretrained on the ImageNet dataset. The models are trained separately as the nature of the features they need to learn to associate with ozone concentration is quite different for each dataset. Transfer learning is used for both CNNs to leverage lower-level features learned on the ImageNet dataset. The ResNet-18 architecture was slightly adapted for our particular task; in the case of the satellite imagery, the CNN&amp;rsquo;s input layer was modified to accommodate for the image&amp;rsquo;s seven channels and was initialized using Kaiming initialization.&lt;/p&gt;
&lt;p&gt;After training both CNNs separately to predict the ozone reading for each location, we extract $512$ features for each satellite and each street image. These are concatenated to create a feature vector of size $1,024$ representing the satellite image and a particular street view of a given location. We then train a Concatenated Feedforward Neural Network (NN) using these multiple representations of each location to predict the location&amp;rsquo;s average ozone level in 2020.&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;architecture4.PNG&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;More details about regularization, the tuning process of hyperparameters and training of the network can be found in the report.&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;After tuning our hyperparameters and training our models, we obtain the following performance (Root Mean Square Error in our test set):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Satellite Model&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Street-level Model&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Concatenated Model&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Test RMSE (ppb)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;12.48&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20.64&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;11.70&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We can also visually compare our predictions for the test with ground truth values in the following figure:&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /media/table4_huc85fa806f0b72bdf75cb9f06cc6195a7_51089_50b966737bd7f132fe17c211944a05a2.jpg 400w,
               /media/table4_huc85fa806f0b72bdf75cb9f06cc6195a7_51089_988aa65ea5f8b0a6a2a942f0f83b494e.jpg 760w,
               /media/table4_huc85fa806f0b72bdf75cb9f06cc6195a7_51089_1200x1200_fit_q75_lanczos.jpg 1200w&#34;
               src=&#34;https://nicolas-suarez.github.io/media/table4_huc85fa806f0b72bdf75cb9f06cc6195a7_51089_50b966737bd7f132fe17c211944a05a2.jpg&#34;
               width=&#34;760&#34;
               height=&#34;312&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
</description>
    </item>
    
    <item>
      <title>A little Stata command to export tables to Excel</title>
      <link>https://nicolas-suarez.github.io/blog/stata-tables/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://nicolas-suarez.github.io/blog/stata-tables/</guid>
      <description>&lt;p&gt;I usually prefer to work in LaTeX, but from time to time I&amp;rsquo;m forced to share my results in Excel. In Stata, I used to use the &lt;a href=&#34;http://repec.org/bocode/o/outreg2.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Outreg2 command&lt;/a&gt;, but the output generated by this program has a weird format, and you always have to read some error messages in Excel.&lt;/p&gt;
&lt;p&gt;Because of this, I decided to program a little piece of code to easily export my regression results to Excel. I&amp;rsquo;m not very creative, so I called my custom command &lt;strong&gt;export_tables&lt;/strong&gt;. You can find the code at my &lt;a href=&#34;https://github.com/nicolas-suarez/Stata-table_export&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;syntax&#34;&gt;Syntax&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-stata&#34;&gt;export_tables, Models(string) Dec(real) Cell(string) USING(string) SHEET(string) [ Options ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Models() contains a list of the models you estimated, and saved with the &amp;ldquo;Estimates Store&amp;rdquo; command.&lt;/li&gt;
&lt;li&gt;Dec() indicates the number of decimal places of your model&amp;rsquo;s coefficients.&lt;/li&gt;
&lt;li&gt;Cell() indicates in which Excel&amp;rsquo;s cell the table is going to begin.&lt;/li&gt;
&lt;li&gt;Using() indicates where are you going to save the excel document, and Sheet() indicates how the sheet of the document will be named.&lt;/li&gt;
&lt;li&gt;In options, you can use Keep() to keep the coefficients associated with certain variables, Drop() to drop the coefficients associated with some variables, Stats() to report some e() statistics stored in your models and Dstats() helps you to set the number of decimal places associated with these statistics. Variables prints the name of the variables in your table, and label prints the variables&#39; labels instead. Std to display standard errors below the coefficients, Pvalues to display the p-values of the coefficients below them, and See to print your output in the console as a table.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-to-use-the-command&#34;&gt;How to use the command&lt;/h2&gt;
&lt;p&gt;The idea behind the command is to run your regressions, store the results with estimates store, and then export the results to excel. You will get a table without a header, but you will see in every row the name of the variable, the coefficients of each model (with stars representing the significance level), the standard errors, and at the end, some statitics. After running this command, you can use &lt;a href=&#34;https://www.stata.com/manuals13/pputexcel.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;putexcel&lt;/a&gt; to further modify your spreadsheet, adding headers, bold or italic text, borders, etc.&lt;/p&gt;
&lt;p&gt;For the moment, this command only works with regression commands like &lt;strong&gt;reg&lt;/strong&gt;, &lt;strong&gt;probit&lt;/strong&gt;, &lt;strong&gt;ivreg2&lt;/strong&gt; or others, but doesn&amp;rsquo;t work with commands like &lt;strong&gt;heckman&lt;/strong&gt; or others that display the results of 2 or more estimations at the same time.&lt;/p&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;You can run the following example code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-stata&#34;&gt;sysuse auto

reg mpg rep78 trunk
est sto m1

reg turn length gear_ratio rep78
est sto m2

export_tables, models(m1 m2) dec(2) cell(A1) using(&amp;quot;test.xlsx&amp;quot;) sheet(&amp;quot;sheet1&amp;quot;) stats(&amp;quot;N r2_a&amp;quot;) label std see
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could also use a wilcard in the models, and write something like &lt;code&gt;models(m*)&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Inequality in social capital in Chile: Assessing the importance of network size and contacts’ occupational prestige on status attainment</title>
      <link>https://nicolas-suarez.github.io/research/social-networks/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://nicolas-suarez.github.io/research/social-networks/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The impact of commuting time over educational achievement: A machine learning approach</title>
      <link>https://nicolas-suarez.github.io/research/commuting-time/</link>
      <pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://nicolas-suarez.github.io/research/commuting-time/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://nicolas-suarez.github.io/admin/config.yml</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://nicolas-suarez.github.io/admin/config.yml</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
