[{"authors":["admin"],"categories":null,"content":"I am a PhD candidate in Economics at Stanford University. I will be on the job market during the 2024-2025 academic year.\n","date":1726963201,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1726963201,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I am a PhD candidate in Economics at Stanford University. I will be on the job market during the 2024-2025 academic year.","tags":null,"title":"Nicolás Suárez Chavarría","type":"authors"},{"authors":["Nicolás Suárez Chavarría"],"categories":null,"content":"Access to basic infrastructure is a critical component of quality of life and an important measure of economic development. However, on-the-ground data about infrastructure access, especially in low-income countries, is often sparse and costly to collect. We train and calibrate a machine learning model to extract data on infrastructure access for each 6.72x6.72km area of Africa from satellite images. The model achieves accuracy levels of 77.1% to 84.7%. We show the value of this novel dataset with two applications. First, we use a spatial regression discontinuity design to study how much of the heterogeneity in infrastructure access across countries comes from differences in institutional quality. Second, we study the role of political favoritism in explaining within country heterogeneity.\n","date":1726963201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1726963201,"objectID":"d882412e73e0601ae0a23f6b0748dbc8","permalink":"https://nicolas-suarez.github.io/research/infrastructure_africa/","publishdate":"2024-09-22T00:00:01Z","relpermalink":"/research/infrastructure_africa/","section":"research","summary":"Access to basic infrastructure is a critical component of quality of life and an important measure of economic development. However, on-the-ground data about infrastructure access, especially in low-income countries, is often sparse and costly to collect. We train and calibrate a machine learning model to extract data on infrastructure access for each 6.72x6.72km area of Africa from satellite images. The model achieves accuracy levels of 77.1% to 84.7%. We show the value of this novel dataset with two applications. First, we use a spatial regression discontinuity design to study how much of the heterogeneity in infrastructure access _across countries_ comes from differences in institutional quality. Second, we study the role of political favoritism in explaining _within country_ heterogeneity.","tags":["Working Papers"],"title":"A New Perspective on Spatial Heterogeneity in African Development","type":"research"},{"authors":["Nicolás Suárez Chavarría","Othman Bensouda","Edoardo Lin"],"categories":null,"content":"This was our class project for Stanford CS229 \u0026ldquo;Machine Learning\u0026rdquo; class during the Fall 2022 quarter. You can find our poster submission here.\nIntroduction We predict asset ownership in Africa making use of Landsat-8 satellite imagery and ground truth data from the Demographic and Health Surveys (DHS). We trained a ResNet-18 model} (He et al., 2016), a sub-class of a Convolutional Neural Network (CNN), and used it to predict asset ownership levels over 6.72 km by 6.72 km patches of land in Africa. We used transfer learning to train our model to perform a regression task, initializing our model with weights originally used to classify images. The performance of our best model is much better than the performance of our baseline models, but our model might be overfitting, and the predictions it generates are far off from our ground truth data. We obtained lower $R^2$ validation set values than Yeh et al. (2020), a paper that attempts our same task.\nData Ground truth: Demographic and Health Surveys (DHS) surveys  We combined all the household DHS surveys for African countries that have been published since 2014 that have a matching file with the geocoordinates of each cluster. Our variable of interest is the score in the wealth index obtained by each household. This score is produced using Principal Component Analysis over survey questions, including but not limited to access to drinkable water, sewerage, electricity, and ownership of farming and non-farming assets. We geocoded 12,511 locations across 24 countries, combining data from 26 DHS surveys between 2014 and 2021. In Panel (a) of Figure 1 we show the spatial distribution of our ground truth data.  Satellite images: Landsat-8 Surface Reflectance collection  We retrieved imagery using the Google Earth Engine API. For each DHS cluster with a geocoded location, we defined a patch of 6.72 km by 6.72 km centered in our location, and we retrieved an image for the patch using the Landsat 8 Surface Reflectance Tier 1 Collection. We used 3 bands from this collection: Red, Green and Blue surface reflectance. We preprocessed each of our images by adding a cloud mask per pixel and then computing the per pixel and band mean composite of all the available images for the year when the DHS cluster was surveyed. We retrieved images for 12,426 locations across all Africa. In Figure Panels (b) and (c) of Figure 1 we show some examples of the cloud masked imagery we produced. We used an 80%, 10%, 10% training, validation and test data split. In the following table we show the sample sizes of our 3 sets:     Set Training Validation Test     Observations 9,941 1,243 1,242      Models  We trained a Residual Network, a particular kind of a Convolutional Neural Network (CNN). We use transfer learning to initialize our model, and we adapt its architecture so we can use it for a regression task. Residual Network (ResNet): Type of CNN with a special architecture defined by He et al. (2016). These kind of models are build by stacking Residual Blocks, blocks of convolutional layers connected with activation functions, where the input of the block is then added to the output of the stacked convolutional layers at the end (see example in Figure 2). Residual blocks should help a deep CNN to avoid the performance problems associated with very deep networks, so if some of the final layers are not helping the model performance, their weights will be set to 0 and the block will become an identity mapping.     Our implementation: We trained a ResNet-18 model, a Residual Network that contains 18 convolutional layers grouped in 8 residual blocks connected by ReLU activation functions. The last layer of the original model is a linear layer connected to a softmax layer that classifies images into 1,000 classes, so we modify the last linear layer so now it outputs only one number that will represent our predicted asset ownership, and we measure our loss as our root mean squared error (RMSE). We initialize our model using the original ResNet-18 pretrained weights. In Figure 3 we show our model\u0026rsquo;s architecture:     Benchmark models: We trained linear regression, Lasso regression and Ridge regression models to compare the performance of our model against them.  Experiments To tune the hyperparameters of our models, we experimented using data augmentation techniques and modifying several components of our model.\n Data augmentation techniques:  Applying independent vertical and horizontal flips to our images with certain probabilities. Rotating our images in degrees multiples of 90 (0, 90, 180 and 270) with certain probabilities. Applying different degrees of Gaussian Blurring to our images.   Hyperparameters tuned:  Number of epochs for training. Mini-batch training size. Number of frozen convolutional layers at the bottom of the model (last layers of the model). Optimizer (Stochastic Gradient Descent or Adam). Learning rate. For Stochastic Gradient Descent, we tuned the momentum parameter (momentum makes our gradient a moving average of our previous gradients).    Results We computed the RMSE and $R^2$ coefficient in our training, validation and test sets for our CNN and benchmark models.\n Linear regression and Ridge regression have good performance on the training set but a very poor performance on the validation and test sets. LASSO regression performs equally bad on the training, validation and test sets. Our best model is a ResNet-18 model trained with: 200 epochs Training batch size of 500 images 4 data augmentation transformations applied to images Adam optimizer Learning rate = 0.001 The best model has an excellent performance on the training set, and a good performance on the validation and test sets, suggesting overfitting despite using regularization techniques.    Country average asset ownership for pixels in our test set Our results are off from the ground truth. Most of the ground truth averages are negative, but we predict on average positive values of asset ownership.\n  Concluding remarks and future work  We trained a ResNet-18 model with Landsat-8 satellite imagery to predict asset ownership in Africa. We modified the original ResNet-18 architecture so we could train it for a regression task, and we used transfer learning to take advantage of the pretrained ResNet-18 weights. The performance of our best model is much better than the performance of our baseline models, but the model might be overfitting, and the predictions it generates are off from our ground truth data. We obtained lower $R^2$ validation set values than Yeh et al. (2020). Future work on this might include expanding our sample size by including more years with DHS surveys, using more channels of our satellite images, increasing the regularization in our model, adding dropout probabilities to our nodes and tuning that hyperparameter.  ","date":1670976000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1670976000,"objectID":"40146e8c6c39ef6e3cf5c3ece8677893","permalink":"https://nicolas-suarez.github.io/research/asset-ownership/","publishdate":"2022-12-14T00:00:00Z","relpermalink":"/research/asset-ownership/","section":"research","summary":"We predict asset ownership in Africa making use of Landsat-8 satellite imagery and ground truth data from the Demographic and Health Surveys (DHS). We trained a ResNet-18 model} (He et al., 2016), a sub-class of a Convolutional Neural Network (CNN), and used it to predict asset ownership levels over 6.72 km by 6.72 km patches of land in Africa. We used transfer learning to train our model to perform a regression task, initializing our model with weights originally used to classify images. The performance of our best model is much better than the performance of our baseline models, but our model might be overfitting, and the predictions it generates are far off from our ground truth data. We obtained lower $R^2$ validation set values than Yeh et al. (2020), a paper that attempts our same task.","tags":["Working Papers","Machine Learning"],"title":"Predicting asset ownership in Africa using satellite imagery","type":"research"},{"authors":["Nicolás Suárez Chavarría"],"categories":null,"content":"Update: I presented an slightly updated version of this Stata package at the 2023 Stata Conference. You can find my presentation here and the updated code here.\nOriginal post: For one of my research projects I was working on peer effects for college students, and I wanted to use the Generalized 2SLS procedure to estimate peer effects described in Bramoullé, Y., Djebbari, H., \u0026amp; Fortin, B. (2009). Identification of peer effects through social networks. Journal of econometrics, 150(1), 41-55.. The problem is that this project required a lot of data work and cleaning, so I worked on it on Stata mostly, but there is not a lot of support for peer effects regressions on Stata, so I had to adapt the code of Bramoullé et al. (2009) on my own. I based my code on their article, and on the code shared on Habiba Djebbari\u0026rsquo;s website.\nHere I share my code, some examples about how to use it, and a comparison of my code and the original R code used by the authors.\nTo wrote this, I took advantage of Stata\u0026rsquo;s new integration with Python and Jupyter Notebooks (more information on how to use this feature can be found here). I also used the rpy2 package to run R commands inside a Jupyter notebook.\nThe original Jupyter Notebook I wrote for this can be found in my Github repository.\nSetting up Stata in Python #setting up Stata in Python\rimport stata_setup\rstata_setup.config(\u0026quot;C:/Program Files/Stata17\u0026quot;, \u0026quot;mp\u0026quot;)\r  ___ ____ ____ ____ ____ ®\r/__ / ____/ / ____/ 17.0\r___/ / /___/ / /___/ MP—Parallel Edition\rStatistics and Data Science Copyright 1985-2021 StataCorp LLC\rStataCorp\r4905 Lakeway Drive\rCollege Station, Texas 77845 USA\r800-STATA-PC https://www.stata.com\r979-696-4600 stata@stata.com\rStata license: Unlimited-user 4-core network, expiring 21 Jul 2022\rSerial number: xxxxxxxxxxxx\rLicensed to: Nicolas Suarez\rStanford University\rNotes:\r1. Unicode is supported; see help unicode_advice.\r2. More than 2 billion observations are allowed; see help obs_advice.\r3. Maximum number of variables is set to 5,000; see help set_maxvar.\rRunning C:\\Program Files\\Stata17/profile.do ...\r Peer IV function To implement linear in means regressions, I wrote the peer_iv function. This function takes as inputs, as any other regression function, a dependent variable and independent variables, plus an adjacency matrix G to perform the calculations. This matrix has to be a Mata matrix object (Stata matrices have size limitations), and it is the only parameter that the user is forced to set. All the other parameters are optiontal: row allows us to row-normalize the adjacency matrix (so the sum of each row is 1, and we can interpret the product of a variable and the matrix as weighted means), the fixed option adds group level fixed effects, the ols option runs a regular OLS regression but with peer effects, so by using this we avoid creating new variables with average outcomes and regressors for the peers of each observation, and the vardir option allow us to pass variables directly to the regression with the ols option, so they won\u0026rsquo;t have a peer effect (this can be used for instance to add dummies for fixed effects).\nThe matrix generates an standard Stata regression output, containing coefficients, standard errors, p-values and all the relevant information, and it stores eclass results. This means that the output could be stored with custom commands like outreg2, estout or esttab that allow the user to build customizable output tables.\n%%stata\rcapture program drop peer_iv\rprogram define peer_iv, eclass\rversion 17\rsyntax varlist, ADJacency(name) [ROW FIXED OLS VARdir(varlist)] /* implements the generalized 2SLS model of Bramoulle et al (2009), without fixed effects.\rThe model includes a constant, then the endogenous effect, effects of the independent variables, and then the exogenous effects.\rFor more details see https://rpubs.com/Nicolas_Gallo/549370\rINPUTS:\rvarlist = exogenous variables\rdep= dependent variable\radjacency=name of the adjacency matrix in Mata\rrow=optional, row normalizes the adjacency matrix\rfixed=optional, estimates model with cohort level fixed effects\rols=optional, OLS results. Don't use together with FIXED\rvardir=optional. Variables to use in the regression that won't have peer effects, only to be used with OLS.\rOUTPUT:\rdisplays the coefficients and standard errors in a table. Stores eclass results.\r*/\r*separating dependent from independent variables\rgettoken dep varlist: varlist\rpreserve\rquietly{\r*returning error if OLS and FIXED are used together\rif \u0026quot;`ols'\u0026quot;!=\u0026quot;\u0026quot; \u0026amp; \u0026quot;`fixed'\u0026quot;!=\u0026quot;\u0026quot; { noisily display as error \u0026quot;options OLS and FIXED may not be combined\u0026quot;\rexit 184\r}\r*returning error if VARDIR and OLS are not used together\rif \u0026quot;`ols'\u0026quot;==\u0026quot;\u0026quot; \u0026amp; \u0026quot;`vardir'\u0026quot;!=\u0026quot;\u0026quot; { noisily display as error \u0026quot;option VARDIR has to be used with OLS option\u0026quot;\rexit 184\r}\r*checking if there are missing values in our data\rreg `dep' `varlist' `vardir'\r*recovering the indexes of non-missing observations\rgen muestra=e(sample)\rereturn clear\r*moving data as matrices\rmata X=st_data(.,\u0026quot;`varlist'\u0026quot;)\rmata y=st_data(.,\u0026quot;`dep'\u0026quot;)\rmata muestra=st_data(.,\u0026quot;muestra\u0026quot;)\rif \u0026quot;`vardir'\u0026quot;!=\u0026quot;\u0026quot; mata vardir=st_data(.,\u0026quot;`vardir'\u0026quot;)\r*dropping missing values from data matrices\rmata X=select(X,muestra)\rmata y=select(y,muestra)\rif \u0026quot;`vardir'\u0026quot;!=\u0026quot;\u0026quot; mata vardir=select(vardir,muestra)\r*dropping missing values from G matrix (eliminating the rows and columns with missing values, so the matrix are comformable)\rmata G1=select(`adjacency',muestra)\rmata G1=select(G1,muestra')\r*row normalizing G if needed\rif \u0026quot;`row'\u0026quot;!=\u0026quot;\u0026quot; mata G1=G1:/editvalue(rowsum(G1),0,1)\r*generating identity matrix\rmata Id=I(rows(G1))\r*OLS results\rif \u0026quot;`ols'\u0026quot;!=\u0026quot;\u0026quot; {\rif \u0026quot;`vardir'\u0026quot;!=\u0026quot;\u0026quot; mata X_1 = J(rows(X),1,1), G1*y, X, G1*X, vardir\relse mata X_1 = J(rows(X),1,1), G1*y, X, G1*X\rmata theta= invsym(quadcross(X_1, X_1))*quadcross(X_1, y)\rmata e= y - X_1*theta\rmata V = (quadsum(e:^2)/(rows(X_1)-cols(X_1)))*invsym(quadcross(X_1, X_1))\r}\relse {\r*putting matrices together\r*with fixed effects\rif \u0026quot;`fixed'\u0026quot;!=\u0026quot;\u0026quot; {\rmata S=( (Id-G1)*X, (Id-G1)*G1*X, (Id-G1)*G1*G1*X )\rmata X_1= ( (Id-G1)*G1*y, (Id-G1)*X, (Id-G1)*G1*X ) }\relse{\rmata S=( J(rows(X),1,1), X, G1*X, G1*G1*X )\rmata X_1= ( J(rows(X),1,1), G1*y, X, G1*X )\r}\rmata P= S*invsym(quadcross(S,S))*S'\r*first 2sls\rif \u0026quot;`fixed'\u0026quot;!=\u0026quot;\u0026quot; mata theta_1= invsym(X_1'*P*X_1)*X_1'*P*(Id-G1)*y\relse mata theta_1= invsym(X_1'*P*X_1)*X_1'*P*y\r*building instrument\rif \u0026quot;`fixed'\u0026quot;!=\u0026quot;\u0026quot; {\rmata Z = G1*luinv(Id-theta_1[1]*G1)*(Id-G1)*(X*theta_1[2::(1+cols(X))] + G1*X*theta_1[(2+cols(X))::(1+2*cols(X))] ), (Id-G1)*X, (Id-G1)*G1*X }\relse{\rmata Z = J(rows(X),1,1), G1*luinv(Id-theta_1[2]*G1)*( theta_1[1]*J(rows(X),1,1) + X*theta_1[3::(2+cols(X))] + G1*X*theta_1[(3+cols(X))::(2+2*cols(X))] ), X, G1*X\r}\r*\r*final 2sls\rif \u0026quot;`fixed'\u0026quot;!=\u0026quot;\u0026quot; mata theta = luinv(quadcross(Z,X_1))*quadcross(Z,(Id-G1)*y)\relse mata theta = luinv(quadcross(Z,X_1))*quadcross(Z,y)\r*resids\rif \u0026quot;`fixed'\u0026quot;!=\u0026quot;\u0026quot; {\rmata e= (Id-G1)*y - luinv(Id-theta[1]*G1)*((Id-G1)*X*theta[2::(1+cols(X))] + (Id-G1)*G1*X*theta[(2+cols(X))::(1+2*cols(X))] )\r}\relse{\rmata e= y - luinv(Id-theta[2]*G1)*( theta[1]*J(rows(X),1,1) + X*theta[3::(2+cols(X))] + G1*X*theta[(3+cols(X))::(2+2*cols(X))] )\r}\r*variance\rmata V = luinv(quadcross(Z,X_1))*(Z')*diag(e:^2)*Z*luinv(quadcross(X_1,Z))\r}\r*sending results to Stata\rmata st_matrix(\u0026quot;b\u0026quot;,theta')\rmata st_matrix(\u0026quot;V\u0026quot;,V)\r*row and col names for matrices\rlocal exog_peer //list for names of exogenous effects\rforeach var in `varlist'{\rlocal exog_peer `exog_peer' `var'_p\r}\rif \u0026quot;`fixed'\u0026quot;!=\u0026quot;\u0026quot; {\rlocal varnames `dep'_p `varlist' `exog_peer' `vardir'\r}\relse{\rlocal varnames _cons `dep'_p `varlist' `exog_peer' `vardir'\r}\r*adding col and rownames\rmatrix colnames b= `varnames'\rmatrix colnames V = `varnames'\rmatrix rownames V = `varnames'\r}\r*storing eclass results\r*tab muestra\rereturn post b V, depname(`dep') esample(muestra)\rmata st_numscalar(\u0026quot;e(N)\u0026quot;, rows(G1))\rmata st_numscalar(\u0026quot;e(df_r)\u0026quot;, rows(X_1)-cols(X_1))\reret local cmd peer_iv\rereturn display\rrestore end\r Example Here we will run a little example to see how the command works, and how you can generate an adjacency matrix in Stata. We are going to use the auto dataset with 1978 automobile data, and we are going to create a random adjacency matrix G with elements that are drawn from a uniform between 0 an 1, but we will force the elements in the main diagonal to be 0. We are also going to row normalize the adjacency matrix.\n%%stata\rsysuse auto, clear\r*generating the matrix\rmata G= runiform(`c(N)', `c(N)') forval i=1/`c(N)'{\rmata G[strtoreal(st_local(\u0026quot;i\u0026quot;)),strtoreal(st_local(\u0026quot;i\u0026quot;))]=0\r}\r*running the regression\rpeer_iv price trunk turn, row adj(G)\reret list\r . . sysuse auto, clear\r(1978 automobile data)\r. . *generating the matrix\r. mata G= runiform(`c(N)', `c(N)') . forval i=1/`c(N)'{\r2. mata G[strtoreal(st_local(\u0026quot;i\u0026quot;)),strtoreal(st_local(\u0026quot;i\u0026quot;))]=0\r3. }\r. . *running the regression\r. peer_iv price trunk turn, row adj(G)\r------------------------------------------------------------------------------\rprice | Coefficient Std. err. t P\u0026gt;|t| [95% conf. interval]\r-------------+----------------------------------------------------------------\r_cons | 41706.23 48765.18 0.86 0.395 -55603.18 139015.6\rprice_p | -1.527064 11.64602 -0.13 0.896 -24.76633 21.7122\rtrunk | 141.5504 83.60055 1.69 0.095 -25.27191 308.3727\rturn | 98.8758 103.6205 0.95 0.343 -107.8956 305.6472\rtrunk_p | 439.69 968.8704 0.45 0.651 -1493.661 2373.041\rturn_p | -959.4334 2872.551 -0.33 0.739 -6691.519 4772.652\r------------------------------------------------------------------------------\r. . eret list\rscalars:\re(N) = 74\re(df_r) = 68\rmacros:\re(cmd) : \u0026quot;peer_iv\u0026quot;\re(properties) : \u0026quot;b V\u0026quot;\re(depvar) : \u0026quot;price\u0026quot;\rmatrices:\re(b) : 1 x 6\re(V) : 6 x 6\r.  We can see the output of the regression, including a constant, the coefficient price_p is the coefficient of the endogenous effect, while trunk_p and turn_p are the exogenous effects.\nAfter the regression command we ran the eret list command, and we can see all the elements that are stored after running the command.\nStoring Mata matrices At least for my particular application, computing the adjacency matrix was very slow, so it is not something that I would do each time before I want to run peer effects regressions. To avoid this, we can use the Mata functions matsave and matuse to store a matrix as a .mmat object, and then load it into Stata.\nChecking if the code works Here, to see if my code works properly, I will run the R code provided by Bramoullé, Djebbari and Fortin (it can be found here) to generate data, then estimate peer effects with and without fixed effects, export their data to Stata, and then see if my function obtains the same coefficients.\nThe code provided by the authors is meant to be used to run Monte Carlo simulations, so I made some modifications to keep only the relevant parts. Also, for both cases, the authors defined different data generating processes, so we will have 2 vectors of dependent variables, but all of them are generated with the vector of white noise.\n#Python package to use magic R commands\r%load_ext rpy2.ipython\r Generating network data in R %%R\rlibrary(knitr)\rlibrary(igraph)\rlibrary(truncnorm)\rset.seed(1)\ralpha=0.7683\rbeta=0.4666\rgamma=0.0834\rdelta=0.1507\re_var=0.1\r#Generating a graph with 100 vertices and a probability of link of 0.04 with the \u0026quot;random.renyi.game()\u0026quot; function\rg\u0026lt;-erdos.renyi.game(100,0.04)\r#Generating the associated weighted adjacency matrix\rG\u0026lt;-get.adjacency(g)\rG\u0026lt;-as.matrix(G)\r#Drawing a vector x of characteristics\rx_sim\u0026lt;-matrix(rbinom(n = nrow(G),size = 1,prob = 0.9458 ),nrow(G),1)\rfor(i in 1:nrow(x_sim)){\rif(x_sim[i,] != 0){\rx_sim[i,]\u0026lt;-rtruncnorm(n = 1,a = 0,b = 1000,mean = 1,sd = 3) }\r}\r#a vector filled with 1, size m x 1 (used when there is an intercept in the model, i.e. when fixed_effects = FALSE)\rl\u0026lt;-matrix(1,nrow(G),1)\rGX\u0026lt;-G %*% x_sim\rG2X\u0026lt;-(G %*% G) %*% x_sim\r#an identity matrix of appropriate size\rI\u0026lt;-(diag(nrow(G))) # Inv corresponds to (I - Beta*G))^(-1) in the reduced form(check equation (5))\r# Solve function gives the inverse of a matrix\rInv\u0026lt;-solve(I - beta * G)\r Case without fixed effects %%R\r#the instrument vector of size m x 4\rS\u0026lt;-matrix(c(l,x_sim,GX,G2X),nrow(x_sim),)\r#P is the weighting matrix of size m x n\rP\u0026lt;-S %*% solve(t(S) %*% S) %*% t(S)\reps\u0026lt;-matrix(rnorm(n = nrow(G),mean = 0,sd = e_var),nrow(G),1)\ry\u0026lt;-alpha * Inv %*% l + Inv %*% (gamma * I + delta * G) %*% x_sim + Inv %*% eps\rGy\u0026lt;-G %*% y\r#X tilde, size n x 4\rX_t\u0026lt;-matrix(c(l,Gy,x_sim,GX),nrow(x_sim),)\r#theta 2sls and extracting its parameters\rth_2sls \u0026lt;-solve(t(X_t) %*% P %*% X_t) %*% t(X_t) %*% P %*% y\ralpha_2sls\u0026lt;-th_2sls[1]\rbeta_2sls\u0026lt;-th_2sls[2]\rgamma_2sls\u0026lt;-th_2sls[3]\rdelta_2sls\u0026lt;-th_2sls[4]\r#Recalculate I with Beta_2sls\rI_2sls\u0026lt;-solve((diag(nrow(G)) - beta_2sls * G )) #Gy estimated in theta 2sls\rgy_2sls\u0026lt;- G %*% I_2sls %*% (alpha_2sls * l + gamma_2sls * x_sim + GX * delta_2sls)\rZ_th\u0026lt;-matrix(c(rep(1,nrow(G)),gy_2sls,x_sim,GX),nrow(x_sim),)\r#THETAS\r#theta lee\rth_lee_1\u0026lt;-solve(t(Z_th) %*% X_t) %*% t(Z_th) %*% y\r Case with fixed effects %%R\rIG \u0026lt;-(I - G)\r#the instrument vector of size m x 3\rS\u0026lt;-matrix(c(IG%*%x_sim,IG%*%GX,IG%*%G2X),nrow(G),)\r#P is the weighting matrix of size m x m\rP\u0026lt;-S %*% solve(t(S) %*% S) %*% t(S)\ry2\u0026lt;- solve(IG) %*% Inv %*% (gamma*I + delta * G) %*% IG %*% x_sim + solve(IG) %*% Inv %*% IG %*% eps\r#X tilde, size m x 3\rX_t\u0026lt;-matrix(c(G%*%IG%*%y2 ,IG%*%x_sim,IG%*%GX),nrow(x_sim),)\r#theta 2sls and extracting its parameters\rth_2sls \u0026lt;-solve(t(X_t) %*% P %*% X_t) %*% t(X_t) %*% P %*% IG%*%y2\rbeta_2sls\u0026lt;-th_2sls[1]\rgamma_2sls\u0026lt;-th_2sls[2]\rdelta_2sls\u0026lt;-th_2sls[3]\r#Recalculate I with Beta_2sls\rInv_2sls\u0026lt;-solve(I - beta_2sls * G )\r#IGy estimated in theta 2sls\rIGy_2sls\u0026lt;-Inv_2sls %*% (gamma_2sls * I + delta_2sls * G) %*% IG %*% x_sim + Inv_2sls %*% IG %*% eps IG_Gy_2sls\u0026lt;- G %*% Inv_2sls %*% (IG %*% (x_sim * gamma_2sls + GX* delta_2sls))\rZ_th\u0026lt;-matrix(c(IG_Gy_2sls,IG%*%x_sim,IG%*%GX),nrow(G),)\r#THETAS\r#theta lee\rth_lee_2\u0026lt;-solve(t(Z_th) %*% X_t) %*% t(Z_th) %*% IG%*%y2\r Storing data in R as CSV, and reading it in Stata %%R\r#storing data and adjacency matrix as CSV, to be readed in Stata later\rwrite.csv(data.frame(x_sim,y,y2),'data.csv',row.names = FALSE)\rwrite.csv(G,'adjacency.csv',row.names = FALSE)\r %%stata\r*reading adjacency matrix, and passing it to Mata\rimport delimited \u0026quot;adjacency.csv\u0026quot;, clear\rputmata G_r=(v*), replace\r*reading data\rimport delimited \u0026quot;data.csv\u0026quot;, varnames(1) clear\r . *reading adjacency matrix, and passing it to Mata\r. import delimited \u0026quot;adjacency.csv\u0026quot;, clear\r(encoding automatically selected: ISO-8859-2)\r(100 vars, 100 obs)\r. putmata G_r=(v*), replace\r(1 matrix posted)\r. . *reading data\r. import delimited \u0026quot;data.csv\u0026quot;, varnames(1) clear\r(encoding automatically selected: ISO-8859-1)\r(3 vars, 100 obs)\r.  Comparing results without fixed effects %%stata\rpeer_iv y x_sim, adj(G_r)\r -----------------------------------------------------------------------------\r\u0026gt; -\ry | Coefficient Std. err. t P\u0026gt;|t| [95% conf. interval]\r-------------+----------------------------------------------------------------\r_cons | .7693815 .0861937 8.93 0.000 .5982885 .9404746\ry_p | .4668116 .0019521 239.13 0.000 .4629367 .4706865\rx_sim | .0832526 .0174479 4.77 0.000 .0486188 .1178864\rx_sim_p | .1501907 .0057371 26.18 0.000 .1388026 .1615789\r------------------------------------------------------------------------------\r %%R\rth_lee_1\r  [,1]\r[1,] 0.7693815\r[2,] 0.4668116\r[3,] 0.0832526\r[4,] 0.1501907\r Comparing results with fixed effects %%stata\rpeer_iv y2 x_sim, fixed adj(G_r)\r ------------------------------------------------------------------------------\ry2 | Coefficient Std. err. t P\u0026gt;|t| [95% conf. interval]\r-------------+----------------------------------------------------------------\ry2_p | .4663327 .0025075 185.97 0.000 .461356 .4713095\rx_sim | .0841561 .0081916 10.27 0.000 .067898 .1004143\rx_sim_p | .1500943 .0018714 80.20 0.000 .14638 .1538086\r------------------------------------------------------------------------------\r %%R\rth_lee_2\r  [,1]\r[1,] 0.46633273\r[2,] 0.08415615\r[3,] 0.15009431\r As we can see, in both cases, the peer_iv command produces the same estimates as the original package. Furthermore, both packages produce estimates that are very similar to the ones used to generate our data (for instance, we have that $\\beta=0.4666$, and in both cases we get coefficients very close to that).\n","date":1648166400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1689897600,"objectID":"cef8309e54e10b284e5ca1fb11ce86e3","permalink":"https://nicolas-suarez.github.io/blog/peer_iv/","publishdate":"2022-03-25T00:00:00Z","relpermalink":"/blog/peer_iv/","section":"blog","summary":"In this notebook I'm going to share a Stata implementation of the Generalized 2SLS procedure to estimate peer effects described in [Bramoullé, Y., Djebbari, H., \u0026 Fortin, B. (2009). Identification of peer effects through social networks. Journal of econometrics, 150(1), 41-55.](https://www.sciencedirect.com/science/article/pii/S0304407609000335).","tags":null,"title":"Generalized 2SLS implementation in Stata","type":"blog"},{"authors":["Nicolás Suárez Chavarría"],"categories":null,"content":"This is a preliminary draft of a research idea I used as my 2nd year paper as a PhD. in Economics student. Here you can find a blog entry I wrote with details of my Stata implementation of the Generalized 2SLS procedure described by Bramoullé et al. (2009).\n","date":1634083200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1634083200,"objectID":"b12f7979493eab53d2ebb8b8c4fbe977","permalink":"https://nicolas-suarez.github.io/research/peer-effects/","publishdate":"2021-10-13T00:00:00Z","relpermalink":"/research/peer-effects/","section":"research","summary":"Using administrative data about the grades of Business and Economics undergraduate students from Chile, and exploiting the fact that students are randomly assigned to their first semester classes, I want to examine the existence of peer effects among students, and to study how different class compositions affect their outcomes. In 2012, the University of Chile implemented a college special admission program that targets high achieving vulnerable students from public schools, and I want to see how students that belong or don't belong to this program interact within their own group and with the other group, and how students should be assigned to classes in order to maximize their academic outcomes.\nBesides the fact that in this context the peers of the students are determined in an exogenous way,     another advantage of this setup is these college students are assigned on average to 6 classes during their first semester, and they interact with different students in each of these classes, so this allows me to use instrumental variables in a similar fashion to Bramoulle et al. (2009), computing measures of the outcomes or characteristics of the peers of the peers of a student, in contrast to other type of studies where all students belong to the same peer group, as it is the case with roommate or classroom studies. Besides that, the network structure can be exploited to compute network characteristics that could be able to explain how the interactions between these groups might determine the outcomes of the students in this context.","tags":["Working Papers"],"title":"Classroom composition and network effects: Evidence from a college special admission program in Chile","type":"research"},{"authors":["Nicolás Suárez Chavarría"],"categories":null,"content":"Description This is my final project for Stanford\u0026rsquo;s ECON 293: Machine Learning and Causal Inference for the Spring 2021 quarter. The code used for this project (in RMarkDown) can be found here and a write up explaining the project more in detail is available here.\nIn this project revisit the findings of Michalopoulos, S., \u0026amp; Papaioannou, E. (2014). National institutions and subnational development in Africa. The Quarterly journal of economics, 129(1), 151-213.. In the mentioned article, the authors explore the role of national institutions on local development levels for in Africa. They exploit the fact that the national boundaries of African countries drawn during their independence partitioned more than 200 ethnic groups across adjacent countries, so within the territory of an ethnic group we have individuals subjected to similar cultures, residing in homogeneous geographic areas, but that are exposed to different national institutions.\nWe can use a Geographical regression discontinuity design (as the authors do in Section IV.C of their paper) to see the effect of exposure to different levels of institutions over local development levels, measured with satellite images of light density at night, and using as a running variable the distance to the national border partitioning a ethnicity.\nThe authors use 3rd and 4th degree RD polynomials, define the bandwidth of their RD design in arbitrary ways, and there are some pixels were the distance to the border is not computed properly, so to overcome those flaws and check how robust their findings are, I plan to use the optrdd package from Imbens, G., \u0026amp; Wager, S. (2019). Optimized regression discontinuity designs. Review of Economics and Statistics, 101(2), 264-278. to estimate an Optimized Regression Discontinuity model, a data-driven model that doesn\u0026rsquo;t rely on polynomial or bandwidth definition.\nEmpirical design Before diving into the issues with the dataset, I will first explain the empirical design for this project. Here, our unit of analysis are patches of 12.6 by 12.6 km of land in Africa. Our dependent variable is a dummy indicating if a pixel is lit or not, according to 2007-2008 satellite night lights measures. Our treatment variable is a dummy indicating if a pixel is on the side of the ethnic tribe territory with higher national institutions (measured as either Rule of Law or Control of Corruption).\nBesides that main variables, the authors also control for population density in their original article, and they also have information about the country and tribe where a pixel is located, and some information related to its geography, like elevation, presence of water, a malaria index, and similar stuff.\nData sources I obtained the original pixel-level dataset from Stelios Michalopoulos' website. I obtained the shapefiles for the ethnic tribes from Nathan Nunn\u0026rsquo;s website. The shapefile with the grid of pixels covering Africa was provided directly by Stelios Michalopoulos.\nProblems with the current data In the current dataset downloaded from the authors website, there are some problems with how the distance to the border is calculated, and they are also missing a lot of pixels, since they discarded all uninhabited pixels. We can illustrate these problems by looking at the Bideyat tribe, located in the border shared among Egypt, Sudan, Chad and Libya. Most of the pixels are in Sudan and Chad, so the authors considered only those 2 countries for their analysis.\nIn following figure we are going to plot the distance to the border for the pixels in Chad (left) and Sudan (right), where blue pixels are the closest, and yellow are the farthest from the national border. Here we can observe that the distance to the border is clearly calculated in the wrong way: we have around 10 pixels at the top of Sudan, in the frontier with Egypt, that are marked to be less than 50 km to the border between Sudan and Chad, but they are around 200 kilometers away from the mentioned border. Their distance to the border was very likely computed around the wrong border.\n  As mentioned before, another problem present in this dataset is that there are a lot of missing pixels: in our previous figure we can see a lot of areas with very little pixels. If we check how many pixels we have per country in the Bideyat territory: there are 598 pixels in Sudan, but only 38 pixels in Chad, and we even have 45 pixels in Egypt, a country that should not be considered here given the approach of the authors.\nThe imbalance present here could be quite problematic, because we have relatively very little pixels in Chad compared to Sudan, and also because the pixels in Chad are not very close to the border, so a regression discontinuity analysis is not going to produce interesting results here.\nReplicating and fixing the dataset Given the previous problems, before trying to estimate causal effects, I\u0026rsquo;m going to rebuild from scratch the dataset, fixing some issues and expanding the number of units in our sample. I will do the following:\n I\u0026rsquo;m going to start by loading the original grid of pixels for Africa. To that grid I will add information about nightlights (average of the DMSP OLS for the years 2007 and 2008) and population density (Population density in 2000). After that, I will also used GIS methods to identify in which country and tribe is every pixel located. With that information, and to use a similar sample to the original one, for each partitioned tribe, I will compute the distance to the national border. To follow Michalopoulos \u0026amp; Papaioannou (2014), I will only consider the two biggest countries in term of area inside a tribe if there are more than 2 countries in the partitioned territory. Finally, using the country and tribe names, I will recover the Rule of Law and Control of Corruption treatment variables from the original dataset, as well as the clustering variable (variable used by the authors and defined in the original ethnographic Atlas of Murdock that groups similar tribes into bigger groups).  With this procedure we pass from an original sample with 40,209 observations, to a new sample with valid information for 55,055 observations. To check that we did everything properly when rebuilding the dataset, in next figure we can see again the distance to the border for the Bideyat tribe, but for the new dataset. We can see that we have data for all pixels in both Chad and Sudan, and that the distance to the border is now computed with respect to the right border.\n  Comparing the different samples I also replicate the original results of estimating equation (3) of Michalopoulos \u0026amp; Papaioannou (2014), that are displayed in their Table VI. To keep things short, those results are only available in the write-up and the knitted version of the RMarkDown code.\nUnivariate Optimized RDD Now that we checked that our new sample is almost identical to the original sample, we can use our optimized RDD methodology on it. In this section I will use the univariate version of the optimized RDD method, estimating a model where the univariate running variable is the distance of the pixels to the national border. We previously computed the distance to the border, and I now modified that variable so the distance is negative for the pixels on the side of the border with lower Rule of Law or Control of Corruption.An advantage of doing this analysis first is that since we use the same running variable as the original paper, we should obtain comparable results, or at least more similar results than when we change to a multivariate running variable.\nTo compute the curvature bound $B$ in this univariate case, we will follow Imbens and Wager (2019) and fit a global quadratic model for both treated and control samples. We get the absolute values of the coefficients, and then we keep as our curvature bound the maximum between the 2 quadratic coefficients. In this application there might be significant heterogeneity in the curvature between tribes, so I will also estimate the curvature within every tribe. I will discard the NA and 0 values obtained for the curvature bound, and then these values are going to be used for a sensitivity analysis. Specifically, for each treatment variable (high Rule of Law or high Control of Corruption) I will estimate the effect of institutions over local development using distance to the border as my running variable, and using the optrdd package. I set the estimation point at 0 (the national border within every tribe). I will do this for 50 values of our curvature bound $B$, ranging from the minimum to the maximum of the within tribe curvatures computed with the global quadratic model. For each model, besides recovering the treatment effect, we also obtain a 95% confidence interval.\nIn the 2 next figures we can see the results of these sensitivity analysis: we can notice that for both of our institutional quality treatment variables the confidence intervals contain 0, so neither of them is statistically significant for most of the values of $B$.\n    We can also plot our weights to see how they look for a particular tribe (given the number of tribes, looking at all the tribes simultaneously is not feasible). To do this, I will estimate the model using the Rule of Law treatment variable, and for the curvature bound $B$ I use the curvature obtained when we use the global fit model for all the sample. In the following figure we can see the weights for the Azjer tribe, and we can notice that the weights for this tribe look a little weird. For the pixels in Libya there is a clear gradient, and the biggest weights are towards the border, whereas the weights in Algeria look weird, giving a lot of weight to pixels in the center of the partition, but not in the border.\n  Multivariate Optimized RDD Now we will proceed to estimate a multivariate optimized RDD. We are going to estimate constant treatment effects, and we will use the latitude and longitude of the centroids of the pixels as the running variables.\nTo estimate the curvature bound $B$, I\u0026rsquo;m going to follow the code from the geographic RDD example in Imbens and Wager (2019). Here I will use a slightly modified version of their get_curvature function, used to ran a cross-validated ridge regression with interacted 7th-order natural splines as features in each side of the border, and then use this to get a worst-case local curvature. Here I apply the function to the whole sample for both of the treatment variables, and I don\u0026rsquo;t estimate individual curvatures for the different tribes, since a lot of them have too little observations to produce reliable results with a technique like this.\nWith this function, we can proceed to estimate our multivariate optimized RDD: for each treatment variable (high Rule of Law or high Control of Corruption) I will estimate the effect of institutions over local development using the latitude and longitude of my pixels as my running variables. I will do this for 20 values of our curvature bound, between $0.1B$ and $10B$, where the original curvature $B$ is computed with the get_curvature function separately for each of the treatment variables. For each model, besides recovering the treatment effect, we also obtain a 95% confidence interval.\nIn the two following figures we can see the results of these sensitivity analysis: we can notice that for Rule of Law generates a positive and mostly statistically significant effect, but when our treatment is defined by Control of Corruption the effect becomes not statistically significant.\n    Finally, we can also plot our weights to see how they look for a particular tribe. To do this, I will estimate the model using the Rule of Law treatment variable with maximum curvature $B$. In the next figure we can look again at the weights for the Azjer tribe, and in this case the pixels look a little weird, since there is not a clear gradient towards the border. I believe this is because this method might not work with multiple geographies at the same time, since there is nothing preventing the program to compare pixels among tribes and ignore the tribe borders.\n  Concluding remarks In this project I revisited the findings of Michalopoulos \u0026amp; Papaioannou (2014). I started by fixing some problems with their data, and then replicating their results with the new data to see if the replication was working properly. Using their methodology I found no statistically significant effect of institutions over local development in any of the samples.\nAfter that, I applied the Optimized Regression Discontinuity Design method with an univariate running variable, the distance to the border, using a wide range of curvature bounds $B$ derived from a within-tribe curvature analysis. Again I found no statistically significant effect.\nFinally, I applied the Optimized Regression Discontinuity Design method with an multivariate running variable, the latitude and longitude of pixels, and I derived the curvature bound using the non-parametric global method described in Imbens and Wager (2019). This time around I found that there is a positive and statistically significant effect of national institutions over development when we define institutions as Rule of Law, but that effect disappears when we measure institutions with Control of Corruption. These last findings are very relevant, since they challenge the previous evidence regarding this topic.\nHowever, I interpret these results with caution: I\u0026rsquo;m not fully sure of how well the multivariate running variable RDD method works here, since we are analyzing several geographical units at the same time, but the model doesn\u0026rsquo;t explicitly defines in which tribe a pixel is. This could lead to comparisons of pixels among different tribes, and the optimization process could end up ignoring completely the national borders that split tribes. There is more work to be done here to adapt this method to this geographical setting with multiple units, maybe related to re-centering the coordinates of each pixel, or adding more explicit constraints into the optimization problem.\nAnother possible point to improve is the curvature bound $B$ for the multivariate case: I ended up estimating just 1 bound, so it would be very interesting to develop methods to estimate the curvature bound in a way that it takes into account the local curvatures for each tribe.\n","date":1622764800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1622764800,"objectID":"7904e50a2b0d801e64ef19f1c177ebe2","permalink":"https://nicolas-suarez.github.io/research/opt-rdd/","publishdate":"2021-06-04T00:00:00Z","relpermalink":"/research/opt-rdd/","section":"research","summary":"In this project I revisit the findings of Michalopoulos \u0026 Papaioannou (2014), exploring the role of national institutions on local development levels in Africa. The authors use 3rd and 4th degree RD polynomials, define the bandwidth of their RD design in arbitrary ways, and there are some pixels were the distance to the border is not computed properly, so to overcome those flaws and check how robust their findings are, I plan to use the optrdd package from Imbens \u0026 Wager (2019) to estimate an Optimized Regression Discontinuity model, a data-driven model that doesn’t rely on polynomial or bandwidth definitions.","tags":["Working Papers","Machine Learning"],"title":"Optimized Regression Discontinuity Application: the effect of national institutions over local development","type":"research"},{"authors":["Nicolás Suárez Chavarría"],"categories":null,"content":"In this tutorial I want to explain how to download and visualize Landsat-8 images using GEE and Python packages. I wrote this code originally for my \u0026ldquo;Using satellite and street level images to predict urban emissions\u0026rdquo; project, and I\u0026rsquo;m sharing it here because we struggled to download images in a simple and beginner friendly way. You can find the actual Jupyter notebook with this example and the proper outputs in this link.\nInitial set-up We start by importing some packages. Besides installing the packages, we also need a Google-Earth Engine account to use the ee package.\nimport os\rimport numpy as np\rimport pandas as pd\rimport pickle\rimport time\rimport math\rimport requests, zipfile, io\rfrom geetools import cloud_mask\rfrom IPython.display import Image\r#importing Earth Engine packages\rimport ee #install in the console with \u0026quot;pip install earthengine-api --upgrade\u0026quot;\ree.Authenticate() #every person needs an Earth Engine account to do this part\ree.Initialize()\r Defining satellite images Here we are going to define our satellite images. In this example, we are going to use the Landsat-8 Surfarce reflectance Tier 1 image collection, containing all the images taken during 2020, and using the 3 RGB bands for this example.\nHere we are also going to apply a mask to the pixels with the cloud_mask function from the geetools package. The mask allow us to exclude from our collection all the pixels that were covered by clouds, snow or similar sources of interference from an image. Since we are working for the moment with an image collection, we use the map() function to individually apply the mask to all the elements in the collection.\n#defining image\rstartDate = '2020-01-01'\rendDate = '2020-12-31'\rlandsat = ee.ImageCollection(\u0026quot;LANDSAT/LC08/C01/T1_SR\u0026quot;)\r# filter date\rlandsat = landsat.filterDate(startDate, endDate) #applying cloud masking\rlandsat_masked=landsat.map( cloud_mask.landsatSR(['cloud']) )\r#selecting bands\rlandsat_masked=landsat_masked.select([\u0026quot;B2\u0026quot;,\u0026quot;B3\u0026quot;,\u0026quot;B4\u0026quot;])\rlandsat = landsat.select([\u0026quot;B2\u0026quot;,\u0026quot;B3\u0026quot;,\u0026quot;B4\u0026quot;])\r Function to define task or downloading image directly After doing this, I\u0026rsquo;m going to define a function to download imagery called image_task. This function download satellite images centered around a point defined by latitude and longitude coordinates, with a certain size, and allows us to store them either on a Google Drive folder, Google Cloud bucket or locally.\nWe start by defining len, the total size of the image in meters, that is computed as the product of the resolution of our Landsat-8 SR images (30 meters) and the number of pixels we want to capture in the image. After that, we generate a circle around the point of interested, using as the radius half of our len parameter, and then we put a bounding box around the circle to get a square. We extract the coordinates of the bounding box and pass them to a ee.Geometry.Rectangle object called rectangle.\nAfter that, we only need to crop our rectangle object from our satellite image, called image here. Here, our image is going to be our previously defined ee.ImageCollection object containing our Landstat-8 SR satellite images. We are going to clip our rectangle area using the filterBounds() method, and then we use the mean() function to obtain a mean-composite of the images in the ImageCollection for the specified area. We also need to define the region where we are working (which is essentially the same as our rectangle), and the dimensions of our image (the number of pixels for the width and height).\nFinally, the last step depends on how we want to download our images:\n  If we want to work locally with our files, then we are going to generate a download URL for our image in TIFF format, with the ee.Image.getDownloadURL() method. We then use requests, zipfile and io to download the image as a ZIP file, decompress it and store it a local folder.\n  If we want to work with cloud services, like Google Drive or Google Cloud, which is more reliable when we work with large volumes of images, then we are going to use ee.batch.Export.image.toCloudStorage() or ee.batch.Export.image.toDrive() to create a Google Earth engine task with specifications of what kind of image we want, and then we use task.start() to start the task, and the images are going to appear in the specified cloud folders. We can also check the status of the task to see if the images were downloaded succesfully or not.\n  def image_download(image,point,image_res,n_pixels,folder_name, image_name, storage=\u0026quot;local\u0026quot;):\r\u0026quot;\u0026quot;\u0026quot;\rFunction to download satellite images from a ee.imageCollection object.\rWe first generate a bounding box of image_res*n_pixels meters around \u0026quot;point\u0026quot;,\rthen we clip that region from the image collection, take the mean image from the collection,\rand send that as a task to the Google Earth Engine. After that, we download the image Google Cloud Storage if storage==\u0026quot;Cloud\u0026quot;, to Google Drive if storage==\u0026quot;Drive\u0026quot; or to a local folder if storage==\u0026quot;local\u0026quot;.\rInputs:\r-image= ee.ImageCollection object\r-point= ee.Geometry.Point object\r-image_res= resolution of the image in meters\r-n_pixels= number of pixels to extract on the images\r-storage= string indicating if we are storing the images in Google Cloud,Google Drive or locally.\rDefaults to local storage.\r-folder_name= string with Google Cloud bucket name if storage==\u0026quot;Cloud\u0026quot;\rstring with the name of a folder in the root of Google Drive if storage==\u0026quot;Drive\u0026quot;\rstring with the path to the image if storage==\u0026quot;local\u0026quot;\r-image_name= string with the image_name for the TIFF image.\rOutput:\rWhen storage==\u0026quot;Cloud\u0026quot; or storage==\u0026quot;Drive\u0026quot;:\r-task= an EE task object. we can then use task.status() to check the status of the task.\rIf the task is completed, we will see a TIFF image in \u0026quot;folder_name\u0026quot; with name \u0026quot;image_name.tif\u0026quot;.\rThe image has 3 dimensions, where the first 2 are n_pixels, and the 3rd is the number of bands of \u0026quot;image\u0026quot;.\rWhen storage==\u0026quot;local\u0026quot;:\r-there is no output, but we will see one TIFF file per band of our image in the folder \u0026quot;folder_name\u0026quot;.\r\u0026quot;\u0026quot;\u0026quot;\r#generating the box around the point\rlen=image_res*n_pixels # for landsat, 30 meters * 224 pixels\rregion= point.buffer(len/2).bounds().getInfo()['coordinates']\r#defining the rectangle\rcoords=np.array(region)\r#taking min and maxs of coordinates to define the rectangle\rcoords=[np.min(coords[:,:,0]), np.min(coords[:,:,1]), np.max(coords[:,:,0]), np.max(coords[:,:,1])]\rrectangle=ee.Geometry.Rectangle(coords)\rif storage==\u0026quot;Cloud\u0026quot;:\r#generating the export task (dimensions is \u0026quot;WIDTHxHEIGHT\u0026quot;)\rtask=ee.batch.Export.image.toCloudStorage(image=image.filterBounds(rectangle).mean(), bucket=folder_name, description=image_name, region=str(region), dimensions=str(n_pixels)+\u0026quot;x\u0026quot;+str(n_pixels))\r#starting the task\rtask.start()\rreturn task\rif storage==\u0026quot;Drive\u0026quot;:\r#generating the export task (dimensions is \u0026quot;WIDTHxHEIGHT\u0026quot;)\rtask=ee.batch.Export.image.toDrive(image=image.filterBounds(rectangle).mean(), folder=folder_name, description=image_name, region=str(region), dimensions=str(n_pixels)+\u0026quot;x\u0026quot;+str(n_pixels))\r#starting the task\rtask.start()\rreturn task\rif storage==\u0026quot;local\u0026quot;:\r#downloading the image\rr=requests.get( image.filterBounds(rectangle).mean().getDownloadURL({\r'name': image_name, 'region': str(region),\r'dimensions': str(n_pixels)+\u0026quot;x\u0026quot;+str(n_pixels)}))\r#unzip it to the selected directory\rz = zipfile.ZipFile(io.BytesIO(r.content))\rz.extractall(folder_name)\r Testing our function To test how our function works, we are going to create a little example, taking a 6.72 by 6.72 km satellite image around the Oval in Stanford campus, and storing it locally:\n#defining the oval as a point\roval=ee.Geometry.Point(-122.169678,37.429154)\r#running our function\rimage_download(image=landsat,point=oval,image_res=30,n_pixels=224,folder_name='LS8_images', image_name='test_image', storage=\u0026quot;local\u0026quot;)\r Now we are going to test that the images were indeed downloaded to the LS8_images folder:\nos.listdir('LS8_images')\r We indeed see that there are 3 files in our folder, one for each channel of the image.\nWe could further work with this images. For instance, we can use packages like imageio to read the images in Python, read them into a numpy array and then use numpy functions like stack to stack all individual images into one big array.\nVisualizing images To visualize images, we are going to do very similar things to what we did before. I will generate the satellite images in almost the same way I did before, but now we are going to add some visualization parameters, visParams to properly see our images.\nWe are going to obtain a jpg image using the ee.Image.getThumbUrl()function, and we are going to visualize directly here. The function programmed below allow us to decide if we want to see a cloud masked version of the image or the regular one.\nThe visualization parameters and the image size are defined here, but could be modified if we wanted.\n#defining parameters for the function\rimage_res=30\rn_pixels=224\r#visualization parameters\rvisParams={'min': 0, 'max': 3000, 'gamma': 1.4, 'bands' : ['B4', 'B3', 'B2'], 'dimensions' : str(n_pixels)+\u0026quot;x\u0026quot;+str(n_pixels),\r'format' : 'jpg'}\r#defining the function\rdef visualization(point,name,mask=True):\r'''\rFunction to visualize the images for our ML application.\rInputs:\r-point= ee.Geometry.point object\r-name: name that is going to be given to the jpg file\r-mask: True to get masked image, False to get unmasked image\rOutputs:\rThe function doesn't produce an output, but generates a file called\r\u0026quot;name.jpg\u0026quot; in the current directory\r'''\r#computing bounding box\rlen=image_res*n_pixels # for landsat, 30 meters * 224 pixels\rregion= point.buffer(len/2).bounds().getInfo()['coordinates']\rcoords=np.array(region)\rcoords=[np.min(coords[:,:,0]), np.min(coords[:,:,1]), np.max(coords[:,:,0]), np.max(coords[:,:,1])]\rrectangle=ee.Geometry.Rectangle(coords)\r#clipping the area from satellite image\rif mask==True:\rclipped_image= landsat_masked.mean().clip(rectangle)\relse:\rclipped_image= landsat.mean().clip(rectangle)\r#getting the image\rrequests.get(clipped_image.getThumbUrl(visParams))\ropen(name+'.jpg', 'wb').write(requests.get(clipped_image.getThumbUrl(visParams)).content)\r Now we are going to test the code. First we will visualize our image around the Oval without cloud masking:\nvisualization(point=oval,name='oval_no_mask',mask=False)\rImage(filename='oval_no_mask.jpg')    And now we are going to visualize our image applying cloud masking:\nvisualization(point=oval,name='oval_cloud_masking',mask=True)\rImage(filename='oval_cloud_masking.jpg')    ","date":1621814400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590278400,"objectID":"c2f477eaa3e9e65d447805aa73f95152","permalink":"https://nicolas-suarez.github.io/blog/landsat-8/","publishdate":"2021-05-24T00:00:00Z","relpermalink":"/blog/landsat-8/","section":"blog","summary":"In this tutorial I want to explain how to download and visualize Landsat-8 images using GEE and Python packages. I wrote this code originally for my \"Using satellite and street level images to predict urban emissions\" project, and I'm sharing it here because we struggled to download images in a simple and beginner friendly way.","tags":null,"title":"Tutorial: Landsat-8 image download and visualization using Google Earth Engine and Python","type":"blog"},{"authors":["Nina Prakash","Nicolás Suárez Chavarría","Andrea Vallebueno"],"categories":null,"content":"This was our class project for Stanford CS230 \u0026ldquo;Deep Learning\u0026rdquo; class during the Winter 2021 quarter. The project was featured as one of the Outstanding projects for the Winter 2021 quarter. You can find our final report here.\nDescription This project examines the relationship between the level of ozone concentration in urban locations and their physical features through the use of Convolutional Neural Networks (CNNs). We train two models, including one trained on satellite imagery (\u0026ldquo;Satellite CNN\u0026rdquo;) to capture higher-level features such as the location\u0026rsquo;s geography, and the other trained on street-level imagery (\u0026ldquo;Street CNN\u0026rdquo;) to learn ground-level features such as motor vehicle activity. These features are then concatenated to train neural network (\u0026ldquo;Concat NN\u0026rdquo;) on this shared representation and predict the location\u0026rsquo;s level of ozone as measured in parts per billion.\nData We obtained ozone measurements (parts per billion) for 12,976 semi-unique locations with ozone levels information mostly located in North America from AirNow.\nOur satellite imagery dataset was constructed using the Google Earth Engine API: for each location labeled with an ozone reading, we retrieve one satellite image centered at that location from the Landsat 8 Surface Reflectance Tier 1 Collection with a resolution of 224 $\\times$ 224 pixels which represents 6.72 km $\\times$ 6.72 km. We use 7 bands from this collection: RGB, ultra blue, near infrared, and two shortwave infrared bands. We preprocess each of our images by adding a cloud mask per pixel and then computing the per pixel and band mean composite of all the available images for the year 2020.\nThe street-level imagery dataset was constructed using the Google Maps Street View API. For each location labeled with an ozone level, we randomly sample 10 geospatial points within 6.72 km from the measurement point.\nHere we can see some examples from our dataset:\n  Network architecture We train the two CNNs separately on the satellite and street-level imagery, both using a ResNet-18 architecture implemented in PyTorch and pretrained on the ImageNet dataset. The models are trained separately as the nature of the features they need to learn to associate with ozone concentration is quite different for each dataset. Transfer learning is used for both CNNs to leverage lower-level features learned on the ImageNet dataset. The ResNet-18 architecture was slightly adapted for our particular task; in the case of the satellite imagery, the CNN\u0026rsquo;s input layer was modified to accommodate for the image\u0026rsquo;s seven channels and was initialized using Kaiming initialization.\nAfter training both CNNs separately to predict the ozone reading for each location, we extract 512 features for each satellite and each street image. These are concatenated to create a feature vector of size 1,024 representing the satellite image and a particular street view of a given location. We then train a Concatenated Feedforward Neural Network (NN) using these multiple representations of each location to predict the location\u0026rsquo;s average ozone level in 2020.\n  More details about regularization, the tuning process of hyperparameters and training of the network can be found in the report.\nResults After tuning our hyperparameters and training our models, we obtain the following performance (Root Mean Square Error in our test set):\n    Satellite Model Street-level Model Concatenated Model     Test RMSE (ppb) 12.48 20.64 11.70    We can also visually compare our predictions for the test with ground truth values in the following figure:\n  ","date":1616025600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616025600,"objectID":"2ec6b6e0f5a1e75b5ffe010472990139","permalink":"https://nicolas-suarez.github.io/research/urban-emissions/","publishdate":"2021-03-18T00:00:00Z","relpermalink":"/research/urban-emissions/","section":"research","summary":"Understanding the impact of the built environment and urban populations on climate change and air quality is a growing challenge as the percentage of the world's population that resides in urban areas continues to rise. In particular, human activity levels have been shown to be directly linked with ground-level ozone, which is responsible for several health and climate effects. We explore this relationship through the use of a multimodal learning architecture that predicts ozone concentrations (parts per billion) in urban areas from satellite and street-level imagery. The model comprises two Convolutional Neural Networks (CNN), one trained on satellite images of each location to learn higher-level features such as geographical characteristics and land use, and another trained on multiple street-level images of each location to learn ground-level features such as motor vehicle activity. The feature representations learned from each sub-model are concatenated and passed through several fully connected layers to predict the ozone level of the location. This concatenated model achieves a test RMSE of 11.70 ppb. This approach can be used to inform urban planning and policy by providing an insight into the particular urban features that aggravate ozone concentrations.","tags":["Working Papers","Machine Learning"],"title":"Predicting Ground Level Ozone Concentration from Urban Satellite and Street Level Imagery using Multimodal CNN","type":"research"},{"authors":["Nicolás Suárez Chavarría"],"categories":[],"content":"I usually prefer to work in LaTeX, but from time to time I\u0026rsquo;m forced to share my results in Excel. In Stata, I used to use the Outreg2 command, but the output generated by this program has a weird format, and you always have to read some error messages in Excel.\nBecause of this, I decided to program a little piece of code to easily export my regression results to Excel. I\u0026rsquo;m not very creative, so I called my custom command export_tables. You can find the code at my Github page.\nSyntax export_tables, Models(string) Dec(real) Cell(string) USING(string) SHEET(string) [ Options ]\r Where:\n Models() contains a list of the models you estimated, and saved with the \u0026ldquo;Estimates Store\u0026rdquo; command. Dec() indicates the number of decimal places of your model\u0026rsquo;s coefficients. Cell() indicates in which Excel\u0026rsquo;s cell the table is going to begin. Using() indicates where are you going to save the excel document, and Sheet() indicates how the sheet of the document will be named. In options, you can use Keep() to keep the coefficients associated with certain variables, Drop() to drop the coefficients associated with some variables, Stats() to report some e() statistics stored in your models and Dstats() helps you to set the number of decimal places associated with these statistics. Variables prints the name of the variables in your table, and label prints the variables' labels instead. Std to display standard errors below the coefficients, Pvalues to display the p-values of the coefficients below them, and See to print your output in the console as a table.  How to use the command The idea behind the command is to run your regressions, store the results with estimates store, and then export the results to excel. You will get a table without a header, but you will see in every row the name of the variable, the coefficients of each model (with stars representing the significance level), the standard errors, and at the end, some statitics. After running this command, you can use putexcel to further modify your spreadsheet, adding headers, bold or italic text, borders, etc.\nFor the moment, this command only works with regression commands like reg, probit, ivreg2 or others, but doesn\u0026rsquo;t work with commands like heckman or others that display the results of 2 or more estimations at the same time.\nExample You can run the following example code:\nsysuse auto\rreg mpg rep78 trunk\rest sto m1\rreg turn length gear_ratio rep78\rest sto m2\rexport_tables, models(m1 m2) dec(2) cell(A1) using(\u0026quot;test.xlsx\u0026quot;) sheet(\u0026quot;sheet1\u0026quot;) stats(\u0026quot;N r2_a\u0026quot;) label std see\r You could also use a wilcard in the models, and write something like models(m*).\n","date":1555545600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555545600,"objectID":"addee16a8f767222042cb01faada6a3f","permalink":"https://nicolas-suarez.github.io/blog/stata-tables/","publishdate":"2019-04-18T00:00:00Z","relpermalink":"/blog/stata-tables/","section":"blog","summary":"A Stata ADO file to export tables to Excel without the problems of Outreg2","tags":[],"title":"A little Stata command to export tables to Excel","type":"blog"},{"authors":["Dante Contreras","Gabriel Otero","Juan Díaz","Nicolás Suárez"],"categories":null,"content":"","date":1551398400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551398400,"objectID":"d1edaba4fc000f3521fd8cb8bbb4367e","permalink":"https://nicolas-suarez.github.io/research/social-networks/","publishdate":"2019-03-01T00:00:00Z","relpermalink":"/research/social-networks/","section":"research","summary":"Long-standing literature argues that social capital is closely implicated in labour market outcomes. However, this hypothesis has yet to be tested in Latin America, the most unequal region in the world. We focus on Chile, one of the most stratified countries in Latin America. This study examines the relationship between social capital and four measures of status attainment, including job prestige and employment income. We use data from the first wave of the Longitudinal Social Study of Chile (ELSOC), a representative survey of the Chilean urban population aged 18–75 years. We analyse a subsample of 1,351 individuals who are currently employed. A Bayesian model of over-dispersion with relational data is used to estimate the size of the network, a novel measure of social capital. We analyse the data set using linear and logistic regression models and a complementary path analysis, first estimating models for the entire sample, and then splitting the sample into three groups to evaluate differences within individuals’ socioeconomic background. Results indicate that contacts’ occupational prestige has a positive association with job prestige and employment income, while the size of the network increases individuals’ salaries and labour participation. We also observe that social capital flows through stratified networks which tend to favour individuals from high socioeconomic backgrounds. We discuss the need to conduct more in-depth evaluations of how better creation of social capital and its effects on status attainment could be closely linked to positions of privilege and advantage accumulation processes in highly unequal contexts.","tags":["Published"],"title":"Inequality in social capital in Chile: Assessing the importance of network size and contacts’ occupational prestige on status attainment","type":"research"},{"authors":["Nicolás Suárez Chavarría"],"categories":null,"content":"","date":1543363200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543363200,"objectID":"d992229d76fc5e8023cc6cf47d419381","permalink":"https://nicolas-suarez.github.io/research/commuting-time/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/research/commuting-time/","section":"research","summary":"Taking advantage of georeferenced data from Chilean students, we estimate the impact of commuting time over academic achievement. As the commuting time is an endogenous variable, we use instrumental variables and fixed effects at school level to overcome this problem. Also, as we don't know which mode of transport the students use, we complement our analysis using machine learning methods  to predict the transportation mode. Our findings suggest that the commuting time has a negative effect over academic performance, but this effect is not always significant.","tags":["Working Papers"],"title":"The impact of commuting time over educational achievement: A machine learning approach","type":"research"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://nicolas-suarez.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]